// Problem 29 - Distinct powers
//
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//     2^2=4, 2^3=8, 2^4=16, 2^5=32
//     3^2=9, 3^3=27, 3^4=81, 3^5=243
//     4^2=16, 4^3=64, 4^4=256, 4^5=1024
//     5^2=25, 5^3=125, 5^4=625, 5^5=3125
//
// If they are then placed in numerical order, with any repeats removed, we get
// the following sequence of 15 distinct terms:
//
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100
// and 2 ≤ b ≤ 100?
use std::collections::HashSet;

type Factor = (u32, u32);

fn main() {
    println!("{}", solution());
}

fn solution() -> usize {
    let mut powers = HashSet::new();

    // Sufficient for factoring integers <= 100
    let primes = vec![2, 3, 5, 7];

    for a in 2..101 {
        for b in 2..101 {
            powers.insert(exponentiate(&factor(a, &primes), b));
        }
    }

    powers.len()
}

fn factor(n: u32, primes: &Vec<u32>) -> Vec<Factor> {
    let mut factors = Vec::new();
    let mut current = n;

    for &p in primes {
        if current % p == 0 {
            let mut multiplicity = 0;

            while current % p == 0 {
                multiplicity += 1;
                current /= p;
            }

            factors.push((p, multiplicity));
        }

        if current == 1 {
            break;
        }
    }

    if current > 1 {
        factors.push((current, 1));
    }

    factors
}

fn exponentiate(factors: &Vec<Factor>, k: u32) -> Vec<Factor> {
    let mut exp = Vec::new();

    for &(p, m) in factors {
        exp.push((p, m*k));
    }

    exp
}
