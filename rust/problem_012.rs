// Problem 12 - Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers. So
// the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
// terms would be:
//
//     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?

fn main() {
    println!("{}", solution());
}

fn solution() -> u64 {
    let target = 500;
    let mut triangular = 0;

    for n in 1.. {
        triangular += n;
        if divisor_count(triangular) > target {
            break;
        }
    }

    triangular
}

fn divisor_count(n: u64) -> u64 {
    let isqrn = (n as f64).sqrt().floor() as u64;
    let mut count = 2;

    for k in 2..(isqrn + 1) {
        if n % k == 0 {
            count += if n/k == k { 1 } else { 2 };
        }
    }

    count
}
