// Problem 44 - Pentagon numbers
//
// Pentagonal numbers are generated by the formula, P(n)=n*(3n − 1)/2. The first
// ten pentagonal numbers are:
//
//         1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
// difference, 70 - 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and
// difference are pentagonal and D = |P(k) − P(j)| is minimised. What is the value
// of D?
package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println(solution())
}

func solution() (d int) {
	start, limit := 1, 10001

	ps := pentagonals(start, limit)

	for i, pi := range ps[:limit-start-1] {
		var first int

		// Determine the starting index
		for k := 0; k < limit-start; k++ {
			if pi+ps[k] >= ps[i+1] {
				first = k
				break
			}
		}

		if first == 0 {
			continue
		}

		for j := first; j < limit-start; j++ {
			pj := ps[j]
			// If the sum of P(i) and P(first+j) is less than the "next"
			// pentagonal number, P(i) is not the minimal difference
			if j+1 < limit-start && pi+pj < ps[j+1] {
				break
			}

			if is_pentagonal(pi+pj) && is_pentagonal(pi+2*pj) {
				d = pi
				break
			}
		}

		if d > 0 {
			break
		}
	}
	return
}

func pentagonal(n int) int {
	return n * (3*n - 1) / 2
}

func is_pentagonal(n int) bool {
	return pentagonal(int(math.Floor(math.Sqrt((2.0/3.0)*float64(n))))+1) == n
}

func pentagonals(start, limit int) []int {
	ps := make([]int, limit-start)
	for ix, n := 0, start; n < limit; ix, n = ix+1, n+1 {
		ps[ix] = pentagonal(n)
	}
	return ps
}
